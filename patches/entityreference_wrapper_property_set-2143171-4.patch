diff --git a/entityreference.module b/entityreference.module
index bdcb562..09a3a47 100644
--- a/entityreference.module
+++ b/entityreference.module
@@ -666,12 +666,17 @@ function entityreference_settings_ajax_submit($form, &$form_state) {
  * Property callback for the Entity Metadata framework.
  */
 function entityreference_field_property_callback(&$info, $entity_type, $field, $instance, $field_type) {
-  // Set the property type based on the targe type.
+  // Set the property type based on the target type.
   $field_type['property_type'] = $field['settings']['target_type'];
 
   // Then apply the default.
   entity_metadata_field_default_property_callback($info, $entity_type, $field, $instance, $field_type);
 
+  // But use our property setter.
+  $name = $field['field_name'];
+  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];
+  $property['setter callback'] = 'entityreference_property_setter';
+
   // Invoke the behaviors to allow them to change the properties.
   foreach (entityreference_get_behavior_handlers($field, $instance) as $handler) {
     $handler->property_info_alter($info, $entity_type, $field, $instance, $field_type);
@@ -679,6 +684,52 @@ function entityreference_field_property_callback(&$info, $entity_type, $field, $
 }
 
 /**
+ * Custom entity metadata property setter for entityreference.
+ *
+ * Here we deal with cases where entity records a name or uuid as the identifier
+ * of a target entity.  We need to store the numeric id, so we try to find it out
+ * here.
+ */
+function entityreference_property_setter($entity, $name, $value, $langcode, $entity_type, $info) {
+  $field = field_info_field($name);
+  $langcode = entity_metadata_field_get_language($entity_type, $entity, $field, $langcode);
+  $values = $field['cardinality'] == 1 ? array($value) : (array) $value;
+
+  $items = array();
+  foreach ($values as $delta => $value) {
+    if (isset($value)) {
+      if (is_numeric($value)) {
+        $items[$delta]['target_id'] = $value;
+      }
+      // We only need to process non-numeric ids.
+      else {
+        $target_id = NULL;
+        // Discover the entity type of the target entity, and get its info.
+        $target_type = $field['settings']['target_type'];
+        $target_info = entity_get_info($target_type);
+        // If this entity type supports a 'name' key, then try loading the entity
+        // by name in order to extract its numeric id.
+        if (isset($target_info['entity keys']['name'])) {
+          if ($target_entity = entity_load_single($target_type, $value)) {
+            list($target_id) = entity_extract_ids($target_type, $target_entity);
+          }
+        }
+
+        // Setting target in any case here - if we found the correct one this
+        // is good, if not, well, it's better to set nothing them raise
+        // exception because original $value doesn't feet in DB.
+        $items[$delta]['target_id'] = $target_id;
+      }
+    }
+  }
+
+  $entity->{$name}[$langcode] = $items;
+  // Empty the static field language cache, so the field system picks up any
+  // possible new languages.
+  drupal_static_reset('field_language');
+}
+
+/**
  * Implements hook_field_widget_info().
  */
 function entityreference_field_widget_info() {
