diff --git a/i18n_field/i18n_field.i18n.inc b/i18n_field/i18n_field.i18n.inc
index 1e31c48..5e054bd 100644
--- a/i18n_field/i18n_field.i18n.inc
+++ b/i18n_field/i18n_field.i18n.inc
@@ -56,6 +56,14 @@ function i18n_field_i18n_object_info() {
           'title' => t('Default value'),
           'format' => 'format',
         ),
+        'prefix' => array(
+          'title' => t('Prefix'),
+          'field' => 'settings.prefix',
+        ),
+        'suffix' => array(
+          'title' => t('Suffix'),
+          'field' => 'settings.suffix',
+        ),
       ),
       //'translate path' => 'admin/structure/types/manage/%bundle/fields/%field_ui_menu/translate/%i18n_language',
     )
diff --git a/i18n_field/i18n_field.inc b/i18n_field/i18n_field.inc
index 8133f1f..e00d8ba 100644
--- a/i18n_field/i18n_field.inc
+++ b/i18n_field/i18n_field.inc
@@ -148,6 +148,15 @@ class i18n_field_instance extends i18n_field_base {
       $properties[$this->get_textgroup()][$object['field_name']][$object['bundle']]['default_value']['string'] = $object['default_value'][0]['value'];
       $properties[$this->get_textgroup()][$object['field_name']][$object['bundle']]['default_value']['format'] = $format;
     }
+
+    // Don't show suffix and prefix for translation if not defined.
+    $translatable_settings = array('prefix', 'suffix');
+    foreach ($translatable_settings as $setting) {
+      if (empty($object['settings'][$setting])) {
+        unset($properties[$this->get_textgroup()][$object['field_name']][$object['bundle']][$setting]);
+      }
+    }
+
     return $properties;
   }
 
diff --git a/i18n_field/i18n_field.module b/i18n_field/i18n_field.module
index b682397..172d5a3 100644
--- a/i18n_field/i18n_field.module
+++ b/i18n_field/i18n_field.module
@@ -224,6 +224,15 @@ function i18n_field_field_widget_form_alter(&$element, &$form_state, $context) {
   // Translate instance to current page language and set to form_state
   // so it will be used for validation messages later.
   $instance_current = i18n_string_object_translate('field_instance', $instance);
+
+  // Normalize translated instance.
+  foreach ($instance_current['settings'] as $setting => $value) {
+    if (!empty($instance_current[$setting])) {
+      $instance_current['settings'][$setting] = $instance_current[$setting];
+      unset($instance_current[$setting]);
+    }
+  }
+
   if (isset($form_state['field'][$instance['field_name']][$langcode]['instance'])) {
     $form_state['field'][$instance['field_name']][$langcode]['instance'] = $instance_current;
   }
@@ -304,6 +313,32 @@ function i18n_field_field_widget_form_alter(&$element, &$form_state, $context) {
       $alter_element['#default_value'] = $translate($instance, $items[$delta]['value'], $i18n_langcode);
     }
   }
+
+  // List of extra translatable properties in field.
+  // Key is a name of $element's property, value is a name of $instance's property.
+  $translatable_properties = array(
+    'field_prefix' => array('settings', 'prefix'),
+    'field_suffix' => array('settings', 'suffix'),
+  );
+  // Translate field properties if set and it is the default one.
+  foreach ($translatable_properties as $element_property => $instance_property) {
+    // Get translated and non-translated value of property.
+    $property_value = drupal_array_get_nested_value($instance, $instance_property);
+    $translated_property_value = drupal_array_get_nested_value($instance_current, $instance_property);
+
+    // If translated and not translated values are different we should replace current value with translated one.
+    if (!empty($translated_property_value) && $translated_property_value != $property_value) {
+      if (!empty($element['#' . $element_property]) && $element['#' . $element_property] == $property_value) {
+        $alter_element['#' . $element_property] = $translated_property_value;
+      }
+      if (!empty($element['value']['#' . $element_property]) && $element['value']['#' . $element_property] == $property_value) {
+        $alter_element['#' . $element_property] = $translated_property_value;
+      }
+      if (!empty($element[0]['#' . $element_property]) && $element[0]['#' . $element_property] == $property_value) {
+        $alter_element[0]['#' . $element_property] = $translated_property_value;
+      }
+    }
+  }
 }
 
 /**
@@ -324,6 +359,28 @@ function i18n_field_field_attach_view_alter(&$output, $context) {
       if (!empty($instance['description'])) {
         $element['#description'] = i18n_field_translate_property($instance, 'description');
       }
+
+      // Translate number fields prefix/suffix if exist.
+      if (in_array($element['#field_type'], array('number_integer', 'number_decimal'))) {
+        // Translate instance to current page language.
+        $instance_current = i18n_string_object_translate('field_instance', $instance);
+        if (!empty($instance_current['prefix']) || !empty($instance_current['suffix'])) {
+          if (isset($instance['display'][$element['#view_mode']])) {
+            $settings = $instance['display'][$element['#view_mode']]['settings'];
+          }
+          else {
+            $settings = $instance['display']['default']['settings'];
+          }
+          foreach ($element['#items'] as $delta => $item) {
+            $output_value = number_format($item['value'], $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
+            $prefixes = !empty($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance_current['prefix'])) : array('');
+            $suffixes = !empty($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance_current['suffix'])) : array('');
+            $prefix = (count($prefixes) > 1) ? format_plural($item['value'], $prefixes[0], $prefixes[1]) : $prefixes[0];
+            $suffix = (count($suffixes) > 1) ? format_plural($item['value'], $suffixes[0], $suffixes[1]) : $suffixes[0];
+            $element[$delta] = array('#markup' => $prefix . $output_value . $suffix);
+          }
+        }
+      }
     }
   }
 }
diff --git a/i18n_field/i18n_field.test b/i18n_field/i18n_field.test
index 6fea159..b1f332d 100644
--- a/i18n_field/i18n_field.test
+++ b/i18n_field/i18n_field.test
@@ -126,4 +126,62 @@ class i18nFieldTestCase extends Drupali18nTestCase {
     $this->assertText($description_translation[$this->secondary_language], 'Field description is translated');
     $this->assertRaw($default_value_translation[$this->secondary_language], 'Default value translated');
   }
+
+  /**
+   * Test the translation of number fields (prefix/suffix values).
+   */
+  function testNumberFieldTranslation() {
+    $field_name = drupal_strtolower($this->randomName());
+    $label = $this->randomName();
+    $description = $this->randomName();
+    $prefix = $this->randomName();
+    $suffix = $this->randomName();
+
+    $field = array(
+      'field_name' => $field_name,
+      'type' => 'number_integer',
+      'cardinality' => 1,
+    );
+    $field = field_create_field($field);
+
+    $instance = array(
+      'field_name' => $field_name,
+      'entity_type' => 'test_entity',
+      'bundle' => 'test_bundle',
+      'label' => $label,
+      'widget' => array(
+        'type' => 'number',
+      ),
+      'settings' => array(
+        'prefix' => $prefix,
+        'suffix' => $suffix,
+      ),
+    );
+    $instance = field_create_instance($instance);
+
+    // Refresh i18n_strings.
+    $edit = array('groups[field]' => TRUE);
+    $this->drupalPost('admin/config/regional/translate/i18n_string', $edit, t('Refresh strings'));
+
+    // Save translations for prefix/suffix.
+    $label_translation = $this->createStringTranslation('field', $label);
+    $description_translation = $this->createStringTranslation('field', $description);
+    $prefix_translation = $this->createStringTranslation('field', $prefix);
+    $suffix_translation = $this->createStringTranslation('field', $suffix);
+    $this->drupalLogin($this->admin_user);
+
+    // Test untranslated values in default language.
+    $this->drupalGet('test-entity/add/test-bundle');
+    $this->assertText($label, 'Field label is not translated');
+    $this->assertText($description, 'Field description is not translated');
+    $this->assertText($prefix, 'Field prefix is not translated');
+    $this->assertText($suffix, 'Field suffix is not translated');
+
+    // Test translated values in secondary language.
+    $this->drupalGet($this->secondary_language . '/test-entity/add/test-bundle');
+    $this->assertText($label_translation[$this->secondary_language], 'Field label is translated');
+    $this->assertText($description_translation[$this->secondary_language], 'Field description is translated');
+    $this->assertText($prefix_translation[$this->secondary_language], 'Field prefix is translated');
+    $this->assertText($suffix_translation[$this->secondary_language], 'Field suffix is translated');
+  }
 }
