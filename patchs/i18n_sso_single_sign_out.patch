diff --git a/i18n_sso/i18n_sso.module b/i18n_sso/i18n_sso.module
index 39cea2e..a6e63b6 100644
--- a/i18n_sso/i18n_sso.module
+++ b/i18n_sso/i18n_sso.module
@@ -6,6 +6,12 @@ function i18n_sso_menu() {
     'page callback' => 'i18n_sso_authenticate_token',
     'page arguments' => array(1, 2),
   );
+  $items['i18n_sso_logout/%i18n_sso_token/%'] = array(
+    'type' => MENU_CALLBACK,
+    'access callback' => TRUE,
+    'page callback' => 'i18n_sso_deauthenticate',
+    'page arguments' => array(1, 2),
+  );

   return $items;
 }
@@ -213,3 +219,118 @@ function i18n_sso_cron() {
     ->condition('expiration', REQUEST_TIME, '<')
     ->execute();
 }
+
+// Check token's existence and validity. If all checks out, log out the user
+// and send them to the next language domain. We take $langcode to avoid
+// deadlocking on languages that aren't based on URL.
+function i18n_sso_deauthenticate($token, $langcode) {
+  global $user;
+
+  // Can't be plain enough.
+  $langcode = check_plain($langcode);
+
+  $valid = FALSE;
+
+  // If they are already authenticated, send them along.
+  if (user_is_logged_in()) {
+    $valid = TRUE;
+  }
+
+  // Avoid stinkers trying to trick us out, including providing nonsense
+  // langcodes.
+  if ($valid === FALSE && $token && in_array($langcode, array_keys(language_list())) && $token->language === $langcode) {
+    if ($token->expiration > (REQUEST_TIME - 900)) {
+      $valid = TRUE;
+    }
+  }
+
+  if ($valid === FALSE) {
+    drupal_access_denied();
+    drupal_exit();
+  }
+  else {
+    // Delete the token, authenticate them, regenerate the session,
+    // create a new one, and go on to the next language.
+
+    db_delete('i18n_sso_tokens')
+      ->condition('token', $token->token)
+      ->execute();
+
+    if (!user_is_logged_in()) {
+      $user = user_load($token->uid);
+
+      // Update the user table timestamp noting user has logged in.
+      // This is also used to invalidate one-time login links.
+      $user->login = REQUEST_TIME;
+      db_update('users')->fields(array('login' => $user->login))->condition('uid', $user->uid)->execute();
+
+      // Avoid session fixation.
+      drupal_session_regenerate();
+    }
+
+    $next_language = i18n_sso_next_language($langcode);
+
+    // Pass along the destination.
+    $next_token = i18n_sso_create_token($user, $token->destination, $next_language);
+
+    // Close session
+    session_destroy();
+
+    if ($next_language) {
+      _i18n_sso_continue_logout($next_token->token, $next_language);
+    }
+    // If we're on the last language, then go to the original destination.
+    else {
+      // See comment on _i18n_sso_continue();
+      drupal_goto($token->destination);
+    }
+  }
+
+}
+/*
+ * hook_user_logout()
+ */
+function i18n_sso_user_logout($account){
+  //Do not destroy the session yet
+  //session_destroy();
+  //drupal_goto();
+  /*
+  drupal_set_message(t('Thanks for visiting, come again!'));
+  session_destroy();
+  drupal_goto();
+  */
+
+  // The user has just logged out. Create the second authentication token
+  // and store their destination.
+
+  // We expect that $user will be populated at this point. If it isn't, don't do anything.
+  if (!user_is_logged_in()) {
+    return;
+  }
+
+  global $user;
+
+  // Send the user back to Frontpage
+  $destination = url('<front>', array('absolute' => TRUE));
+
+  $first_language = i18n_sso_next_language();
+
+  $token = i18n_sso_create_token($user, $destination, $first_language);
+
+  // Do a drupal_goto(); $form_state['redirect'] isn't reliable enough. For
+  // example, if there was a destination passed via query string, it will
+  // take precedence. We've already stored it, and we don't want that anymore.
+  _i18n_sso_continue_logout($token->token, $first_language);
+}
+
+function _i18n_sso_continue_logout($token, $langcode) {
+  $next_sso_url = "i18n_sso_logout/{$token}/{$langcode}";
+
+  // Get the language object for the langcode provided to us. url() wants this.
+  $languages = language_list();
+  $language = $languages[$langcode];
+
+  $url = url($next_sso_url, array('language' => $language, 'absolute' => TRUE));
+  header("Location:$url");
+  drupal_exit();
+}
\ No newline at end of file
